
cluster:
  name: broker
  authorization:
    type: simple
# authorization:
#   type: keycloak
#   tokenEndpointUri: https://keycloak-keycloak.svc.cluster.local/auth/realms/kafka/protocol/openid-connect/token
#   delegateToKafkaAcls: false
#   disableTlsHostnameVerification: false
#   clientId: broker-client
#   clientSecret:
#     secretName: broker-client
#     key: clientSecret
  listeners:
    - name: plain
      port: 9092
      type: internal
      tls: false
    - name: tls
      port: 9093
      type: internal
      tls: true
      authentication:
        type: tls
      configuration:
        brokerCertChainAndKey:
          secretName: cert-broker-secret
          certificate: tls.crt
          key: tls.key
# - authentication:
#     type: oauth
#     enableOauthBearer: true
#     jwksEndpointUri: https://keycloak-keycloak.svc.cluster.local/auth/realms/kafka/protocol/openid-connect/certs
#     validIssuerUri: https://keycloak-keycloak.svc.cluster.local/auth/realms/kafka
#     userNameClaim: azp
#     clientId: broker-client
#     clientSecret:
#       secretName: broker-client
#       key: clientSecret
#   name: oauth
#   port: 9096
#   tls: true
#   type: internal
  config:
    offsets.topic.replication.factor: 3
    transaction.state.log.replication.factor: 3
    transaction.state.log.min.isr: 2
    default.replication.factor: 3
    min.insync.replicas: 2


nodePools:
  - name: node-pool
    spec:
      replicas: 3
      roles:
        - controller
        - broker
      storage:
        type: ephemeral
# storage:
#   type: jbod
#   volumes:
#     - id: 0
#       type: persistent-claim
#       size: 10Gi
#       deleteClaim: false
# resources: 
#   requests:
#     memory: 256Mi
#     cpu: 500m
#   limits:
#     memory: 1Gi
#     cpu: "1"

topics:
  - name: test-topic
    spec:
      replicas: 3
      partitions: 12
  - name: other-topic
    spec:
      replicas: 3
      partitions: 6
